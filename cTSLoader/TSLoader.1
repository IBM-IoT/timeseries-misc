.\"Text automatically generated by txt2man
.TH TSLoader  "13 May 2015" "Informix TimeSeries" ""
.SH NAME
\fBTSL_Init, TSL_Load, TSL_Shutdown \fP- The Informix TimeSeries TSLoader client
\fB
.SH SYNOPSIS
.nf
.fam C
\fBTSL_Init\fP [ \fB--verbose\fP ] \fB--database\fP \fIdbname\fP \fB--table\fP \fItabname\fP \fB--column\fP \fIts_column\fP
         [ \fB--user\fP \fIusername\fP \fB--password\fP \fIpasswd\fP ]
         [ \fB--logfile\fP /path/to/message.log ] [ \fB--datetime\fP \fIdt_format\fP ]

\fBTSL_Load\fP [ \fB--verbose\fP ] \fB--database\fP \fIdbname\fP \fB--table\fP \fItabname\fP \fB--column\fP \fIts_column\fP
         [ \fB--user\fP \fIusername\fP \fB--password\fP \fIpasswd\fP ]
         { \fB--input\fP { \fIfile\fP | '-' } | \fB--indput-dir\fP \fIdirname\fP }
         [ \fB--readers\fP \fInreaders\fP ] [ \fB--one-shot\fP ]
         [ \fB--tx-size\fP \fInrows\fP ] [ \fB--status\fP \fInseconds\fP ] [ \fB--tsl-rejects\fP /path/to/TSL_rejects.log ]
         [ \fB--repeat-marker\fP \fInelements\fP ] [ \fB--lock-containers\fP ] [ \fB--no-info\fP ]
         [ \fB--put-count\fP \fInbuffers\fP ] [ \fB--put-buffer\fP \fIbuffsize\fP ] [ \fB--putbuf-dir\fP \fIdirname\fP ]
         [ \fB--rejects\fP /path/to/rejects.log ] [ \fB--ifs\fP '|' ] [ \fB--threads\fP \fIN\fP ] 
         [ \fB--reduced-log\fP ] [ \fB--flush-flag\fP \fIN\fP ] [ \fB--remove-allnulls\fP ]
         [ \fB--skip-repeat-columns\fP [ \fIncols\fP ] ] [ \fB--new-ts\fP 'timeseries'
         [ \fB--to-utc\fP \fIcolumn_number\fP ] [ \fB--pass-through\fP { \fI0\fP | \fI1\fP | \fI2\fP } ] [ \fB--fix-non-ascii\fP ]
         [ \fB--flush-interval\fP ]

\fBTSL_Shutdown\fP [ \fB--verbose\fP ] \fB--database\fP \fIdbname\fP \fB--table\fP \fItabname\fP \fB--column\fP \fIts_column\fP
             [ \fB--user\fP \fIusername\fP \fB--password\fP \fIpasswd\fP ]


.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
The TSLoader client programs facilitate fast insertion of TimeSeries data.
.PP
\fBTSL_Init\fP is used to initialise the internal TimeSeries loader structures
in the Informix server. It requires a database name, the table name and
the TimeSeries column name. It executes the SQL function \fBTSL_Init\fP(). This
must be called before any loading takes place. It is recommended that the
TimeSeries base table is seeded first with data before running \fBTSL_Init\fP.
It must have been run before attempting to use \fBTSL_Load\fP. 
.PP
\fBTSL_Load\fP is the data loader client. It also requires the database, table
and column name. It expects data in the standard '|' delimited format for
unloaded data. The field ordering must be:
.PP
.nf
.fam C
    primarykey|timestamp|field1|field2|field3|\.\.\.

.fam T
.fi
If it is a composite primary key then each part of the key must be '|'
delimited. The complete requirements for the input data format is specified
in the TimeSeries manual.
.PP
The \fBTSL_Load\fP program reads the input stream and creates
buffers of lines suitable for using with the SQL function \fBTSL_Put\fP().
After one or more buffers have been sent to the server they are
usually flushed to disk using the SQL function \fBTSL_Commit\fP(). See the
TRANSACTIONS section for more information.
.PP
The \fBTSL_Shutdown\fP program is used to free up the server resources. After
running this program it will be necessary to re-run \fBTSL_Init\fP.
.PP
The three programs are actually a single executable, just linked to a
different name.
.SH OPTIONS
.TP
.B
\fB--usage\fP
Print a list of available options.
.TP
.B
\fB--man\fP
Print this man page.
.TP
.B
\fB--version\fP
Print some version information.
.TP
.B
\fB--verbose\fP
Print more informative messages.
.TP
.B
\fB--database\fP \fIdbname\fP
Database to connect to. Can be in \fIdbname\fP@server format.
.TP
.B
\fB--table\fP \fItabname\fP
TimeSeries base table.
.TP
.B
\fB--user\fP \fIusername\fP
Connect as this user name.
.TP
.B
\fB--password\fP \fIpasswd\fP
Connect with this password.
.TP
.B
\fB--column\fP \fIts_column\fP
Column in table defined as type TimeSeries.
.TP
.B
\fB--logfile\fP \fIfile\fP
This is for the server to log messages to. A full
path name is required
.TP
.B
\fB--datetime\fP \fIdt_format\fP
This is the format of the time stamp field in the
data it follows the same convention as the Informix
DBFORMAT environment variable. The default
is '%Y-%m-%d %H:%M:%S'.
.TP
.B
\fB--input\fP { \fIfile\fP | '-' }
The input data can be in a \fIfile\fP or read from
standard input.
.TP
.B
\fB--input-dir\fP \fIdirname\fP
The input data is picked up from a directory structure
with this as the root.
.TP
.B
\fB--readers\fP
Number of directory reader threads.
.TP
.B
\fB--one-shot\fP
Normally the input directory is continually scanned
for input files. With this option the loader will
terminate when no more files are available.
.TP
.B
\fB--tx-size\fP \fInrows\fP
The commit interval can be set based on the number of
incoming rows. The default is 10000.
.TP
.B
\fB--status\fP \fInseconds\fP
The current loading progress is printed every few
seconds. 
.TP
.B
\fB--tsl-rejects\fP \fIfile\fP
This \fIfile\fP name is passed to the server for
internally rejected rows to be sent to.
.TP
.B
\fB--put-count\fP \fInbuffers\fP
The number of \fBTSL_Put\fP() calls made before the data
gets flushed to disk. The default is \fI1\fP. Caution should
be exercised when increasing this value as it could
cause excesive memory usage in the server and increase
the posibility of generating a long transaction. It is
also counter productive to have a lot of data to flush
in one go as it ties up the server and prevents other
processing.
.TP
.B
\fB--put-buffer\fP bufsize
The size of the buffer used by \fBTSL_Put\fP(). The maximum
size is that of an LVARCHAR.
.TP
.B
\fB--putbuf-dir\fP \fIdirname\fP
Use TSL_Put (<handle>, 'FILE:/\.\.\.') and use a \fIfile\fP to
store the data instead of sending a buffer over SQLI.
.TP
.B
\fB--lock-containers\fP
There is some optimisation in the server to reduce the
calls to the internal lock manager when the whole
container is locked. However it has implication for
the way transactions work, see the TRANSACTIONS section
for more details.
.TP
.B
\fB--no-info\fP
Don't use the \fBTSL_FlushInfo\fP() SQL function to gather
statistics from the flush to disk call. It saves a
small amount of network traffic.
.TP
.B
\fB--rejects\fP \fIfile\fP
This \fIfile\fP is used to log the incoming lines of data
that are rejected by the client loader.
.TP
.B
\fB--threads\fP \fIN\fP
Specify the number of threads to use for loading. See
the section on PERFORMANCE for more details.
.TP
.B
\fB--flush-flag\fP \fIN\fP
Use this flag as the basis for the flag used when data
is flushed. This can be used to control the way
duplicate data is handled. The default is 5.
.TP
.B
\fB--flush-interval\fP \fIN\fP
If the input data stream goes idle or there are no
files to process then data may be sitting in put
buffers. Check every \fIN\fP seconds for this and do a
forced flush of the data so it is sent to disk.
.TP
.B
\fB--reduced-log\fP
Incorporate the reduced logging flag (256) when
the data is flushed.
.TP
.B
\fB--to-utc\fP \fIcolumn_number\fP
TimeSeries stores time stamps either in UTC or in
localtime but has no provision for daylight savings.
Use this flag in order to convert from localtime
with daylight savings to UTC. It is important that
the time stamps for the period of the daylight
change over are in time stamp order.
.TP
.B
\fB--new-ts\fP 'timeseries'
To provision a new TimeSeries a specifcation string
must be supplied. If it does not have a reference to
a container then the least used container will be used.
.TP
.B
\fB--pass-through\fP { \fI0\fP | \fI1\fP | \fI2\fP }
For testing purposes it is possible to run the loader
in pre-processing mode without sending the data to the
server.
.RS
.TP
.B
\fI0\fP
Read data and process it. Database calls are NOPs.
.TP
.B
\fI1\fP
Data is pre-processed and sent to stdout.
.TP
.B
\fI2\fP
Data is pre-processed and sent to stderr.
.RE
.TP
.B
\fB--fix-non-ascii\fP
If there are any control charcters in the input they
are transformed into '?' to make them acceptable for
insertion into the database. Otherwise the input row
will be rejected. Rejected rows will be recorded in
the client rejects \fIfile\fP (\fB--rejects\fP) if specified. 
.TP
.B
\fB--skip-repeat-columns\fP [ \fIncols\fP ]
Turn on the feature that replaces repeating
values with NULL to reduce the storage requirements.
Optionally specify the number of leading fields in the
data that should be preserved.
.TP
.B
\fB--repeat-marker\fP \fIN\fP
When using repeat replacement, how often a full row,
without NULLs, is written. Default 100.
.TP
.B
\fB--remove-allnulls\fP
For very aggresive space saving it is possible to
entirely remove redundant data when all the values
in the element are NULL. This is only suitable for
irregular TimeSeries data.
.SH TRANSACTIONS
The default mode when running \fBTSL_Load\fP is to use the \fBTSL_Commit\fP() SQL function
to flush the data to disk. The transaction size can be controlled by using
the \fB--tx-size\fP option. Be careful when increasing the size of this parameter,
the larger the value the more likelyhood of hitting a long transaction. It
also will have an adverse effect on memory usage if the \fB--reduced-log\fP option
is used as well.
.PP
If the \fB--lock-containers\fP option is used then it is not possible to use
\fBTSL_Commit\fP() because the commit of the first internal transaction will
release the lock. WHen this option is used the \fBTSL_FlushAll\fP() function
is used within a single transaction. This makes the transaction size
dependent on the size of the put buffer and number of buffers sent before
the flush. Similar care shold be taken here not to make the transaction too
large.
.PP
It is suggested that the maximum transaction size should be less than 100,000
rows and that no more than 25 puts are performed before a flush.
.SH PERFORMANCE
The main goal of the TSLoader client is to get the best insert performance 
for TimeSeries data by using the TSL API built into the server. AS well as
using this efficient API it also has some optimisations available that
will further boost performance.
.RE
.TP
.B
Multithreading
The number of threads used to insert data can be configured
to make the best use of the hardware available, although this will be
dependent on the way the TimeSeries data has been physically laid out.
.RS
.PP
To reduce the possibility of contention among threads, each loader
thread is dedicated to a set of containers. This ensures that no loader
thread will work on the same container as any other. To do this, \fBTSL_Load\fP
must read in the TimeSeries base table on start up to establish a mapping of
primary key to container name. This mapping is fixed for the time that the
loader is running. This means that any new TimeSeries inserted after the
loader has started will not be in the map and incoming data for that
TimeSeries will be discarded.
.PP
In order for this to be advantageous it is necessary to spread the
TimeSeries data evenly, among multiple containers. Once this is done the
optimum number of threads wil be based on the number of available CPUs.
.PP
When using the \fB--input-dir\fP option it is possible to specify the number
of threads that will be processing the files with the \fB--readers\fP option.
.PP
In cluster and multi-server modes the number of threads for each node is
derived from the number of CPUs on the node. If \fB--threads\fP is specified in
this context it will override this on a per-node basis.
.RE
.TP
.B
Batch Processing
The most efficient method for inserting TimeSeries data is using batches
of data that is sorted by primary key and then time stamp. This greatly
reduces the internal overhead generated when different TimeSeries have to
be opened and closed for only a single insert candidate.
.RS
.PP
In batch mode
it is also useful to consider the reduced logging flag where multiple
elements for the same page will almost halve the number of loggical log
records required.
.RE
.TP
.B
Storage Optimisation
NULL values in TimeSeries fields take up no space so it can be a useful
storage optimisation to turn default, or often repeated, values into NULLs.
This can be accomplished in the loader using the \fB--skip-repeat-columns\fP
option.
.RS
.PP
With this option turned on, any time a value is repeated for
a TimeSeries it will be replaced with a NULL to save space. So this
sequence of rows
.PP
.nf
.fam C
    key1|2015-02-12 17:22:00|1|2|3|A|
    key1|2015-02-12 17:23:00|2|2|3|B|
    key1|2015-02-12 17:24:00|2|2|3||
    key1|2015-02-12 17:25:00|3|2|4|C|

.fam T
.fi
Will be sent to the server as:
.PP
.nf
.fam C
    key1|2015-02-12 17:22:00|1|2|3|A|
    key1|2015-02-12 17:23:00|2|||B|
    key1|2015-02-12 17:24:00|||||
    key1|2015-02-12 17:25:00|3||4|C|

.fam T
.fi
The NULLs in the transformed data will take up no space on disk. This can be
a significant saving if there is a lot of repeated data. There are however
some limitations with this approach.
.TP
.B
o
When querying the data it is necessary to replace the NULLs with the
correct value. This will need to be done manually in the query client or
in the server by using the \fBProjectedClip\fP() function with the \fBcolumn\fP(nn)
specifier to look back though the data set for the last non-NULL value.
Because of the possible processing overhead when going back a long way, a
marker row with all the correct values is inserted at an interval
determined by the \fB--repeat-marker\fP option.
.TP
.B
o
It is important to ensure that data is always recieved in time stamp order.
Any out of order data will get a NULL replacement based on the preceeding
input row; which may not be appropriate.
.TP
.B
o
There is no provision for handling a true NULL within the input data.
It will be subject to repeat replacement when queried.
.PP
It may not be appropriate to apply the repeat replacement scheme to all
fields in the data. In this case the first \fIN\fP fields can be protected by
specifying \fIN\fP to the \fB--skip-repeat-columns\fP option. For example with \fIN\fP=\fI2\fP
the above example data would look like this.
.PP
.nf
.fam C
    key1|2015-02-12 17:22:00|1|2|3|A|
    key1|2015-02-12 17:23:00|2|2|3|B|
    key1|2015-02-12 17:24:00|2|2|||
    key1|2015-02-12 17:25:00|3|2|4|C|

.fam T
.fi
For more aggresive optimisation it is possible to discard rows where NULL
replacement would generate a row with all values being NULL. This can be
turned on with the \fB--remove-allnulls\fP option. It will work in conjunction
with the skipping of initial fields where equality of value to the previous
row is used rather than the value being NULL. It is an option best suited
to irregular data where values are propogated forwards by default.
.RE
.TP
.B
Data Directory
When using the \fB--input-dir\fP option there must be the following
sub-directories available: Input, Process, Complete. A \fIfile\fP ending
in .tsl placed in the Input sub-directory will be processed by the loader.
While being processed it is moved to the Process sub-directory and then
moved to the Complete directory when processing is finished. If the load
is interrupted the part processed files remain in the Process directory.
.SH EXAMPLES
\fBTSL_Init\fP \fB--database\fP stores_demo \fB--table\fP ts_data \fB--column\fP raw_reads \fB--datetime\fP '%Y-%m-%d %H:%M:%S.%F3' \fB--logfile\fP ${PWD}/loader.log
.PP
This initialises the server for fast loading of TimeSeries data. The input
time stamp is of type DATETIME YEAR TO \fBFRACTION\fP(3) and the log for server
messages is specified.
.PP
cat input.unl | \fBTSL_Load\fP \fB--database\fP stores_demo \fB--table\fP ts_data \fB--column\fP raw_reads \fB--input\fP - \fB--status\fP 10 \fB--put-count\fP 5 \fB--rejects\fP ${PWD}/bad_input.log \fB--tsl-rejects\fP ${PWD}/reject.log \fB--threads\fP 4
.PP
Here, the loader reads from stdin, prints a status message (elememt count
and rate) every 10 seconds. After every 5 calls to \fBTSL_Put\fP() a flush is
performed. Any input lines with bad data is logged by the client to
the bad_input.log \fIfile\fP, any rows rejected by the server are logged in
the reject.log \fIfile\fP. Four loader threads will be used to insert the data.
.PP
\fBTSL_Shutdown\fP \fB--database\fP stores_demo \fB--table\fP ts_data \fB--column\fP raw_reads
.PP
The fast loader API in the server is shutdown.
.SH ENVIRONMENT
The standard Informix environment variables for making a database
connection need to be set. INFORMIXDIR, INFORMIXSQLHOSTS, INFORMIXSERVER
and also LD_LIBRARY_PATH needs to include the client library directories.
.PP
If FET_BUF_SIZE is not in the environment then it is set to twice the
size of the put buffer.
.SH TO DO
Monitor incoming time stamps when removing repeating fields and produce
a warning for any out of order data that will invalidate the NULL
replacement strategy.
.PP
Specify a column list for the fields that are subject to NULL replacement.
.PP
Enable multi-node inserts to a clustered GRID.
.PP
Fix the use of \fB--threads\fP to be more consistent.
.PP
The mapping of containers to loader threads should take account of
the physical dbspace to reduce contention.
.SH SEE ALSO
The Informix TimeSeries manual and the Informix Performance
Tuning Guide.
.SH BUGS
Probably more than you can imagine.
.SH AUTHOR
Cosmo@uk.ibm.com
